import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from db import Database
from config import API_KEY

TOKEN = API_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher()

db = Database()

logging.basicConfig(level=logging.INFO)


@dp.message(lambda message: message.text.lower().startswith("/start"))
async def start_command(message: Message):
    await message.answer("üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.\n\n"
                         "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: /search <—Å–ª–æ–≤–æ>\n"
                         "üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É: /genre <–∂–∞–Ω—Ä> <–≥–æ–¥>\n"
                         "üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: /history")


@dp.message(lambda message: message.text.lower().startswith("/search"))
async def search_command(message: Message):
    parts = message.text.split(maxsplit=1)

    if len(parts) < 2:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/search Baby`")
        return

    keyword = parts[1]
    results = db.search_by_keyword(keyword)

    if results:
        text = "\n".join([f"üé¨ {film['title']} ({film['release_year']})" for film in results])
    else:
        text = "‚ùå –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await message.answer(text)


@dp.message(lambda message: message.text.lower().startswith("/genre") or message.text.lower().startswith("/gerne"))
async def genre_command(message: Message):
    parts = message.text.split(maxsplit=2)

    if parts[0].lower() == "/gerne":
        await message.answer("‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `/genre <–∂–∞–Ω—Ä> <–≥–æ–¥>`")
        return

    if len(parts) < 3:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∏ –≥–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: `/genre Horror 1995`")
        return

    genre, year = parts[1], parts[2]

    if not year.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: `/genre Action 2006`")
        return

    results = db.search_by_genre_year(genre, int(year))
    if results:
        text = "\n".join([f"üé¨ {film['title']} ({film['release_year']})" for film in results])
    else:
        text = "‚ùå –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await message.answer(text)


@dp.message(lambda message: message.text.lower() == "/history")
async def history_command(message: Message):
    results = db.get_popular_queries()

    if results:
        text = "\n".join([f"üîç {row['query_text']} - {row['search_count']} —Ä–∞–∑" for row in results])
    else:
        text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."

    await message.answer(text)


async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
